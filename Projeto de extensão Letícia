#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <ctype.h>

void clear(){
    #ifdef __linux__
        system("clear");
    #elif _WIN32
        system("cls");
    #endif    
}

// Função para validar se a entrada é um número entre 1 e 5
int validar_opcao(int num) {
    char input[100];
    int numero;
    int valid;

    while (1) {
        if (num == 5) printf("Digite uma opcao: [1-5]: ");
        if (num == 2) printf("Digite 1 para sim e 0 para não: ");

        if (fgets(input, sizeof(input), stdin) != NULL) {
            // Remove o caractere de nova linha, se presente
            input[strcspn(input, "\n")] = 0;

            // Verifica se toda a entrada é composta por dígitos
            valid = 1;
            for (int i = 0; input[i] != '\0'; i++) {
                if (!isdigit(input[i])) {
                    valid = 0;
                    break;
                }
            }
            
            // Converte para inteiro e verifica se está no intervalo desejado
            if (valid) {
                numero = atoi(input);
                if (numero >= 1 && numero <= num) {
                    return numero;
                }
            }
            printf("Opcao incorreta.\n");
        } else {
            printf("Erro ao ler entrada.\n");
        }
    }
}

bool ValidaBin() {
    FILE *file = fopen("dados.bin", "rb");
    if (file) {
        fclose(file);
        return true;
    }
    return false;
}

void CreateCSV(const char* filename, const char* data) {
    FILE *file = fopen(filename, "w");
    if (file) {
        fprintf(file, "%s", data);
        fclose(file);
        printf("Arquivo CSV criado: %s\n", filename);
    } else {
        printf("Erro ao criar arquivo CSV.\n");
    }
}

void LotsInsert() {
    char filename[100];
    printf("Digite o nome do arquivo txt (dia_mes_ano.txt): ");
    scanf("%s", filename);

    // Extrair mês e ano do nome do arquivo
    char *token = strtok(filename, "_");
    token = strtok(NULL, "_"); // mês
    int mes = atoi(token);
    token = strtok(NULL, "."); // ano
    int ano = atoi(token);

    // Verificar se já existem dados para o mês e ano
    FILE *binFile = fopen("dados.bin", "rb");
    bool exists = false;
    if (binFile) {
        // Verificar se já existem dados para o mês e ano
        // ... (Aqui você teria a lógica para ler e verificar os dados)
        fclose(binFile);
    }

    if (exists) {
        printf("Já existem dados para esse mês. Deseja sobrescrever?\n");
        int opcao = validar_opcao(2);
        if (opcao == 0) {
            printf("Inserção cancelada.\n");
            return;
        }
    }

    // Inserir dados no arquivo binário
    binFile = fopen("dados.bin", "ab");
    if (binFile) {
        // Lógica para inserir dados no arquivo binário
        // ... (Aqui você teria a lógica para ler os dados do txt e escrever no binário)
        fclose(binFile);
        printf("Dados %s inseridos com sucesso no arquivo dados.bin\n", filename);
    } else {
        printf("Erro ao abrir arquivo binário para escrita.\n");
    }
}

void LotsDelete() {
    printf("Digite a data que deseja excluir 'mm/aaaa': ");
    char data[10];
    scanf("%s", data);

    // Extrair mês e ano da data informada
    char *token = strtok(data, "/");
    int mes = atoi(token);
    token = strtok(NULL, "/");
    int ano = atoi(token);

    FILE *binFile = fopen("dados.bin", "rb");
    FILE *backupFile = fopen("backup.bin", "wb");
    int registrosApagados = 0;

    if (binFile && backupFile) {
        // Lógica para copiar dados não correspondentes ao mês informado
        // ... (Aqui você teria a lógica para ler do binário original e escrever no backup)

        fclose(binFile);
        fclose(backupFile);

        remove("dados.bin");
        rename("backup.bin", "dados.bin");

        printf("%d registros apagados.\n", registrosApagados);
    } else {
        printf("Erro ao abrir arquivos.\n");
    }
}

void LotsSum() {
    // Função para validar se o arquivo dados.bin existe.
    bool valida = ValidaBin();
    if (!valida) {
        printf("Alimente o Banco de Dados antes utilizando a opcao 1 do menu\n");
        return;
    }

    FILE *binFile = fopen("dados.bin", "rb");
    if (binFile) {
        // Lógica para somar os dados por mês
        // ... (Aqui você teria a lógica para ler os dados e calcular as somas por mês)

        // Criar CSV
        // const char* csvData = ...; // Dados calculados
        // CreateCSV("somatorio.csv", csvData);

        fclose(binFile);
    } else {
        printf("Erro ao abrir arquivo dados.bin para leitura.\n");
    }
}

void LotsList() {
    // Função para validar se o arquivo dados.bin existe.
    bool valida = ValidaBin();
    if (!valida) {
        printf("Alimente o Banco de Dados antes utilizando a opcao 1 do menu\n");
        return;
    }

    FILE *binFile = fopen("dados.bin", "rb");
    if (binFile) {
        // Lógica para listar os dados e criar CSV
        // ... (Aqui você teria a lógica para ler os dados e listá-los)

        // Criar CSV
        // const char* csvData = ...; // Dados lidos
        // CreateCSV("todos_registros.csv", csvData);

        fclose(binFile);

        printf("Total de registros listados: %d\n", /* numero de registros */);
    } else {
        printf("Erro ao abrir arquivo dados.bin para leitura.\n");
    }
}

int main(int argc, char *argv[]) {
    printf("%d %s\n", argc, argv[0]);
   
    if (argc == 2) printf("%d %s %s\n", argc, argv[0], argv[1]);
   
    if (argc == 3) printf("%d %s %s %s\n", argc, argv[0], argv[1], argv[2]);
   
    clear();      
     
    int opcao = -1;
    while (opcao != 5) {    
        do {    
            // clear();
            printf("****************************\n");
            printf(" 1 - Inserir lote           \n");
            printf(" 2 - Eliminar lote          \n");
            printf(" 3 - Somatorio mensal (csv) \n");
            printf(" 4 - Listagem (csv)         \n");
            printf(" 5 - Encerrar               \n");              
            printf("****************************\n");
            opcao = validar_opcao(5);
           
        } while (opcao < 1 || opcao > 5);
       
        switch (opcao) {
            case 1: 
                // Inserir lotes
                LotsInsert();
                break;
                 
            case 2: 
                // Eliminar lotes
                LotsDelete();
                break;  
                 
            case 3:
                // Somar total do mês
                LotsSum();
                break;
                 
            case 4: 
                // Listar lotes e criar arquivo CSV
                LotsList();
                break;
                 
            case 5: 
                printf("Saindo....\n");
                return 0;

            default:
                printf("Opcao inválida. Tente novamente!!!!\n");
                break;
        }        
    }
}
